<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lhdt.persistence.UrbanGroupMapper">

	<!-- 도시 그룹 목록 조회 -->
	<select id="getListUrbanGroup" resultType="urbanGroup">
		/* getListUrbanGroup */
		WITH RECURSIVE urban_group_tree (
			urban_group_id, urban_group_name, user_id, ancestor, parent, depth, view_order, children, basic, available,
			start_date, end_date, viewStartDate, viewEndDate,
			location, area, receiving_population, receiving_household, project_operator, transfer_local_government,
			description, insert_date, path, cycle
		) AS (
		SELECT A.urban_group_id, A.urban_group_name, A.user_id, A.ancestor, A.parent, A.depth, A.view_order, A.children, A.basic, A.available,
			A.start_date, A.end_date, TO_CHAR(A.start_date, 'YYYY-MM-DD') AS viewStartDate, TO_CHAR(A.end_date, 'YYYY-MM-DD') AS viewEndDate,
			A.location, A.area, A.receiving_population, A.receiving_household, A.project_operator, A.transfer_local_government,
			A.description, A.insert_date, ARRAY[A.view_order], false
		FROM urban_group A
		WHERE A.parent = 0
		<if test="available != null">
			AND A.available = #{available}
		</if>
		UNION ALL
		SELECT A.urban_group_id, A.urban_group_name, A.user_id, A.ancestor, A.parent, A.depth, A.view_order, A.children, A.basic, A.available,
			A.start_date, A.end_date, TO_CHAR(A.start_date, 'YYYY-MM-DD') AS viewStartDate, TO_CHAR(A.end_date, 'YYYY-MM-DD') AS viewEndDate,
		 	A.location, A.area, A.receiving_population, A.receiving_household, A.project_operator, A.transfer_local_government,
			A.description, A.insert_date, path || A.view_order, A.urban_group_id = ANY(path)
		FROM urban_group A, urban_group_tree B
		WHERE A.parent = B.urban_group_id AND not cycle
		)
		SELECT urban_group_id, urban_group_name, user_id, ancestor, parent, depth, view_order, children, basic, available,
			start_date, end_date, viewStartDate, viewEndDate,
			location, area, receiving_population, receiving_household, project_operator, transfer_local_government,
			description, insert_date, path
		FROM urban_group_tree
		ORDER BY path
	</select>

	<!-- 도시 그룹 정보 -->
	<select id="getUrbanGroup" parameterType="int" resultType="urbanGroup">
		/* getUrbanGroup */
		SELECT A.*,
			CASE
				WHEN parent > 0 THEN ( SELECT urban_group_name FROM urban_group WHERE urban_group_id = A.parent )
				ELSE null
			END AS parentName
		FROM urban_group A
		WHERE urban_group_id = #{urbanGroupId}
	</select>

	<!-- 부모와 순서를 가지고 도시 그룹 정보를 취득 -->
	<select id="getUrbanGroupByParentAndViewOrder" parameterType="urbanGroup" resultType="urbanGroup">
		/* getUrbanGroupByParentAndViewOrder */
		SELECT *
		FROM urban_group
		WHERE parent = #{parent}
		<if test="updateType == 'UP'.toString()">
			<![CDATA[
			AND view_order < #{viewOrder}
			]]>
			ORDER BY view_order DESC
		</if>
		<if test="updateType == 'DOWN'.toString()">
			<![CDATA[
			AND view_order > #{viewOrder}
			]]>
			ORDER BY view_order
		</if>
		LIMIT 1
	</select>

	<!-- 도시 그룹 Key 중복 확인 -->
	<select id="isUrbanGroupKeyDuplication" parameterType="urbanGroup" resultType="boolean">
		/* isUrbanGroupKeyDuplication */
		SELECT
			CASE
				WHEN COUNT(*) > 0 THEN true
				ELSE false
			END AS duplication
		FROM urban_group
		WHERE urban_group_key = #{urbanGroupKey}
	</select>

	<!-- 도시 그룹 등록 -->
	<insert id="insertUrbanGroup" parameterType="urbanGroup">
		/* insertUrbanGroup */
		<selectKey keyProperty="urbanGroupId" resultType="int" order="BEFORE">
			SELECT NEXTVAL('urban_group_seq')
		</selectKey>
		INSERT INTO urban_group (
			urban_group_id, urban_group_key, urban_group_name, user_id, ancestor, parent, depth, view_order, children, basic, available,
			start_date, end_date,
			<if test="location != null and location != ''">
				location,
			</if>
			area, receiving_population, receiving_household, project_operator, transfer_local_government,
			description
		) VALUES (
			#{urbanGroupId}, #{urbanGroupKey}, #{urbanGroupName}, #{userId},
			(
				SELECT COALESCE(MAX(ancestor), #{urbanGroupId})
				FROM urban_group
				WHERE urban_group_id = #{parent}
				AND urban_group_id != 0
			),
			#{parent},
			(
				SELECT COALESCE(MAX(depth),  0 ) + 1
				FROM urban_group
				WHERE urban_group_id = #{parent}
			),
			(
				SELECT COALESCE(MAX(view_order), 0) + 1
				FROM urban_group
				WHERE parent = #{parent}
			),
			(
				SELECT COUNT(*)
				FROM urban_group
				WHERE parent = #{urbanGroupId}
			),
			#{basic},
			#{available},
			TO_TIMESTAMP(#{viewStartDate}, 'YYYYMMDD'), TO_TIMESTAMP(#{viewEndDate}, 'YYYYMMDD'),
			<if test="location != null and location != ''">
			ST_GeomFromText(#{location}, 4326),
			</if>
			#{area}, #{receivingPopulation}, #{receivingHousehold}, #{projectOperator}, #{transferLocalGovernment},
			trim(#{description})
		)
	</insert>

	<!-- 도시 그룹 순서 수정 -->
	<update id="updateUrbanGroupViewOrder" parameterType="urbanGroup">
		/* updateUrbanGroupViewOrder */
		UPDATE urban_group
		SET view_order = #{viewOrder}
		WHERE urban_group_id = #{urbanGroupId}
	</update>

	<!-- 데이터 그룹 수정 -->
	<update id="updateUrbanGroup" parameterType="urbanGroup">
		/* updateUrbanGroup */
		UPDATE urban_group
		SET
		<if test="urbanGroupName != null and urbanGroupName != ''">
			urban_group_name = #{urbanGroupName},
		</if>
		<if test="userId != null and userId != ''">
			user_id = #{userId},
		</if>
		<if test="ancestor != null and ancestor gt 0">
			ancestor = #{ancestor},
		</if>
		<if test="parent != null and parent gt 0">
			parent = #{parent},
		</if>
		<if test="depth != null and depth gt 0">
			depth = #{depth},
		</if>
		<if test="viewOrder != null and viewOrder gt 0">
			view_order = #{viewOrder},
		</if>
		<if test="children != null and children gte 0">
			children = #{children},
		</if>
		<if test="description != null and description != ''">
			description = #{description},
		</if>
		<if test="basic != null">
			basic = #{basic},
		</if>
		<if test="available != null">
			available = #{available},
		</if>
		<if test="viewStartDate != null">
			start_date = TO_TIMESTAMP(#{viewStartDate}, 'YYYYMMDDHH24MISSUS'),
		</if>
		<if test="viewEndDate != null">
			end_date = TO_TIMESTAMP(#{viewEndDate}, 'YYYYMMDDHH24MISSUS'),
		</if>
		<if test="location != null">
			location = ST_GeomFromText(#{location}, 4326),
		</if>
		<if test="area != null">
			area = #{area},
		</if>
		<if test="receivingPopulation != null">
			receiving_population = #{receivingPopulation},
		</if>
		<if test="receivingHousehold != null">
			receiving_household = #{receivingHousehold},
		</if>
		<if test="projectOperator != null">
			project_operator = #{projectOperator},
		</if>
		<if test="transferLocalGovernment != null">
			transfer_local_government = #{transferLocalGovernment},
		</if>
		update_date = NOW()
		WHERE urban_group_id = #{urbanGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</update>

	<!-- 도시 그룹 삭제 -->
	<delete id="deleteUrbanGroup" parameterType="urbanGroup">
		/* deleteUrbanGroup */
		DELETE
		FROM urban_group
		WHERE urban_group_id = #{urbanGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</delete>

	<!-- ancestor를 이용하여 도시 그룹 삭제 -->
	<delete id="deleteUrbanGroupByAncestor" parameterType="urbanGroup">
		/* deleteUrbanGroupByAncestor */
		DELETE
		FROM urban_group
		WHERE ancestor = #{urbanGroupId}
		OR urban_group_id = #{urbanGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</delete>

	<!-- parent를 이용하여 도시 그룹 삭제 -->
	<delete id="deleteUrbanGroupByParent" parameterType="urbanGroup">
		/* deleteUrbanGroupByParent */
		DELETE
		FROM urban_group
		WHERE parent = #{urbanGroupId}
		OR urban_group_id = #{urbanGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</delete>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lhdt.persistence.NewTownGroupMapper">

	<!-- 뉴타운 그룹 목록 조회 -->
	<select id="getListNewTownGroup" resultType="newTownGroup">
		/* getListNewTownGroup */
		WITH RECURSIVE new_town_group_tree (
			new_town_group_id, new_town_group_name, user_id, ancestor, parent, depth, view_order, children, available,
			start_date, end_date, location, area, receiving_population, receiving_household, project_operator, transfer_local_government,
			description, insert_date, path, cycle
		) AS (
		SELECT A.new_town_group_id, A.new_town_group_name, A.user_id, A.ancestor, A.parent, A.depth, A.view_order, A.children, A.available,
			A.start_date, A.end_date, A.location, A.area, A.receiving_population, A.receiving_household, A.project_operator, A.transfer_local_government,
			A.description, A.insert_date, ARRAY[A.view_order], false
		FROM new_town_group A
		WHERE A.parent = 0
		<if test="available != null">
			AND A.available = #{available}
		</if>
		UNION ALL
		SELECT A.new_town_group_id, A.new_town_group_name, A.user_id, A.ancestor, A.parent, A.depth, A.view_order, A.children, A.available,
			A.start_date, A.end_date, A.location, A.area, A.receiving_population, A.receiving_household, A.project_operator, A.transfer_local_government,
			A.description, A.insert_date, path || A.view_order, A.new_town_group_id = ANY(path)
		FROM new_town_group A, new_town_group_tree B
		WHERE A.parent = B.new_town_group_id AND not cycle
		)
		SELECT new_town_group_id, new_town_group_name, user_id, ancestor, parent, depth, view_order, children, available,
			start_date, end_date, location, area, receiving_population, receiving_household, project_operator, transfer_local_government,
			description, insert_date, path
		FROM new_town_group_tree
		ORDER BY path
	</select>

	<!-- 뉴타운 그룹 정보 -->
	<select id="getNewTownGroup" parameterType="int" resultType="newTownGroup">
		/* getNewTownGroup */
		SELECT A.*,
			CASE
				WHEN parent > 0 THEN ( SELECT new_town_group_name FROM new_town_group WHERE new_town_group_id = A.parent )
				ELSE null
			END AS parentName
		FROM new_town_group A
		WHERE new_town_group_id = #{newTownGroupId}
	</select>

	<!-- 부모와 순서를 가지고 뉴타운 그룹 정보를 취득 -->
	<select id="getNewTownGroupByParentAndViewOrder" parameterType="newTownGroup" resultType="newTownGroup">
		/* getNewTownGroupByParentAndViewOrder */
		SELECT *
		FROM new_town_group
		WHERE parent = #{parent}
		<if test="updateType == 'UP'.toString()">
			<![CDATA[
			AND view_order < #{viewOrder}
			]]>
			ORDER BY view_order DESC
		</if>
		<if test="updateType == 'DOWN'.toString()">
			<![CDATA[
			AND view_order > #{viewOrder}
			]]>
			ORDER BY view_order
		</if>
		LIMIT 1
	</select>

	<!-- 뉴타운 그룹 등록 -->
	<insert id="insertNewTownGroup" parameterType="newTownGroup">
		/* insertNewTownGroup */
		<selectKey keyProperty="newTownGroupId" resultType="int" order="BEFORE">
			SELECT NEXTVAL('new_town_group_seq')
		</selectKey>
		INSERT INTO new_town_group (
			new_town_group_id, new_town_group_name, user_id, ancestor, parent, depth, view_order, children, available,
			start_date, end_date,
			<if test="location != null">
				location,
			</if>
			area, receiving_population, receiving_household, project_operator, transfer_local_government,
			description
		) VALUES (
			#{newTownGroupId}, #{newTownGroupName}, #{userId},
			(
				SELECT COALESCE(MAX(ancestor), #{newTownGroupId})
				FROM new_town_group
				WHERE new_town_group_id = #{parent}
				AND new_town_group_id != 0
			),
			#{parent},
			(
				SELECT COALESCE(MAX(depth),  0 ) + 1
				FROM new_town_group
				WHERE new_town_group_id = #{parent}
			),
			(
				SELECT COALESCE(MAX(view_order), 0) + 1
				FROM new_town_group
				WHERE parent = #{parent}
			),
			(
				SELECT COUNT(*)
				FROM new_town_group
				WHERE parent = #{newTownGroupId}
			),
			#{available},
			#{startDate}, #{endDate},
			<if test="location != null">
			ST_GeomFromText(#{location}, 4326),
			</if>
			#{area}, #{receivingPopulation}, #{receivingHousehold}, #{projectOperator}, #{transferLocalGovernment},
			trim(#{description})
		)
	</insert>

	<!-- 뉴타운 그룹 순서 수정 -->
	<update id="updateNewTownGroupViewOrder" parameterType="newTownGroup">
		/* updateNewTownGroupViewOrder */
		UPDATE new_town_group
		SET view_order = #{viewOrder}
		WHERE new_town_group_id = #{newTownGroupId}
	</update>

	<!-- 데이터 그룹 수정 -->
	<update id="updateNewTownGroup" parameterType="newTownGroup">
		/* updateNewTownGroup */
		UPDATE new_town_group
		SET
		<if test="newTownGroupName != null and newTownGroupName != ''">
			new_town_group_name = #{newTownGroupName},
		</if>
		<if test="userId != null and userId != ''">
			user_id = #{userId},
		</if>
		<if test="ancestor != null and ancestor gt 0">
			ancestor = #{ancestor},
		</if>
		<if test="parent != null and parent gt 0">
			parent = #{parent},
		</if>
		<if test="depth != null and depth gt 0">
			depth = #{depth},
		</if>
		<if test="viewOrder != null and viewOrder gt 0">
			view_order = #{viewOrder},
		</if>
		<if test="children != null and children gte 0">
			children = #{children},
		</if>
		<if test="description != null and description != ''">
			description = #{description},
		</if>
		<if test="available != null">
			available = #{available},
		</if>
		<if test="startDate != null">
			start_date = #{startDate},
		</if>
		<if test="endDate != null">
			end_date = #{endDate},
		</if>
		<if test="location != null">
			location = ST_GeomFromText(#{location}, 4326),
		</if>
		<if test="area != null">
			area = #{area},
		</if>
		<if test="receivingPopulation != null">
			receiving_population = #{receivingPopulation},
		</if>
		<if test="receivingHousehold != null">
			receiving_household = #{receivingHousehold},
		</if>
		<if test="projectOperator != null">
			project_operator = #{projectOperator},
		</if>
		<if test="transferLocalGovernment != null">
			transfer_local_government = #{transferLocalGovernment},
		</if>
		update_date = NOW()
		WHERE new_town_group_id = #{newTownGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</update>

	<!-- 뉴타운 그룹 삭제 -->
	<delete id="deleteNewTownGroup" parameterType="newTownGroup">
		/* deleteNewTownGroup */
		DELETE
		FROM new_town_group
		WHERE new_town_group_id = #{newTownGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</delete>

	<!-- ancestor를 이용하여 뉴타운 그룹 삭제 -->
	<delete id="deleteNewTownGroupByAncestor" parameterType="newTownGroup">
		/* deleteNewTownGroupByAncestor */
		DELETE
		FROM new_town_group
		WHERE ancestor = #{newTownGroupId}
		OR new_town_group_id = #{newTownGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</delete>

	<!-- parent를 이용하여 뉴타운 그룹 삭제 -->
	<delete id="deleteNewTownGroupByParent" parameterType="newTownGroup">
		/* deleteNewTownGroupByParent */
		DELETE
		FROM new_town_group
		WHERE parent = #{newTownGroupId}
		OR new_town_group_id = #{newTownGroupId}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</delete>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lhdt.persistence.DataLibraryGroupMapper">

	<!-- 데이터 library 그룹 목록 조회 -->
	<select id="getListDataLibraryGroup" resultType="dataLibraryGroup">
		/* getListDataLibraryGroup */
		WITH RECURSIVE data_library_group_tree (
			data_library_group_id, data_library_group_name, data_library_group_key, data_library_group_path, data_library_group_target,
			sharing, user_id, ancestor, parent, depth, view_order,
			children, basic, available, data_library_count, description, update_date, insert_date, path, cycle
		) AS (
	        SELECT A.data_library_group_id, A.data_library_group_name, A.data_library_group_key, A.data_library_group_path, A.data_library_group_target,
	         	A.sharing, A.user_id, A.ancestor, A.parent, A.depth, A.view_order,
	        	A.children, A.basic, A.available, A.data_library_count, A.description, A.update_date, A.insert_date, ARRAY[A.view_order], false
			FROM data_library_group A
			WHERE A.data_library_group_target = 'admin'
				AND A.available = true
				<choose>
					<when test="dataLibraryGroupId != null and dataLibraryGroupId > 0">
						AND A.data_library_group_id = #{dataLibraryGroupId}
					</when>
					<otherwise>
						AND A.parent = 0
					</otherwise>
				</choose>

			UNION ALL
	        SELECT A.data_library_group_id, A.data_library_group_name, A.data_library_group_key, A.data_library_group_path, A.data_library_group_target,
	         	A.sharing, A.user_id, A.ancestor, A.parent, A.depth, A.view_order,
	        	A.children, A.basic, A.available, A.data_library_count, A.description, A.update_date, A.insert_date, path || A.view_order, A.data_library_group_id = ANY(path)
	        FROM data_library_group A, data_library_group_tree B
	        WHERE A.parent = B.data_library_group_id AND not cycle
		)
	    SELECT data_library_group_id, data_library_group_name, data_library_group_key, data_library_group_path, data_library_group_target,
	     	sharing, user_id, ancestor, parent, depth, view_order,
	    	children, basic, available, data_library_count, description, update_date, insert_date, path
	    FROM data_library_group_tree
		<if test="dataLibraryGroupId != null and dataLibraryGroupId > 0">
			WHERE data_library_group_id != #{dataLibraryGroupId}
		</if>
	    ORDER BY path
	</select>

	<!-- 데이터 library 그룹 정보 -->
	<select id="getDataLibraryGroup" parameterType="dataLibraryGroup" resultType="dataLibraryGroup">
		/* getDataLibraryGroup */
		SELECT A.*,
			CASE 
				WHEN parent > 0 THEN ( SELECT data_library_group_name FROM data_library_group WHERE data_library_group_id = A.parent )
				ELSE null
			END AS parentName
		FROM data_library_group A
		WHERE A.data_library_group_id = #{dataLibraryGroupId}
			<if test="userId != null and userId != ''">
			AND A.user_id = #{userId}
			</if>
	</select>

	<!-- 나를 부모로 가지는 자식 데이터 그룹 목록을 취득 -->
	<select id="getChildrenDataLibraryGroupListByParent" parameterType="dataLibraryGroup" resultType="dataLibraryGroup">
		/* getChildrenDataLibraryGroupListByParent */
		SELECT *
		FROM data_library_group
		WHERE parent = #{dataLibraryGroupId}
			<if test="userId != null and userId != ''">
			AND user_id = #{userId}
			</if>
	</select>

	<select id="getDataLibraryGroupListByDepth" parameterType="dataLibraryGroup" resultType="dataLibraryGroup">
		/* getDataLibraryGroupListByDepth */
		SELECT *
		FROM data_library_group
		WHERE depth = #{depth}
		<if test="userId != null and userId != ''">
			AND user_id = #{userId}
		</if>
	</select>
</mapper>